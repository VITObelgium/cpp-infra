CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
CMAKE_POLICY(VERSION 2.8)

SET(PACKAGE "opaq")
SET(PACKAGE_VERSION_MAJOR 0)
SET(PACKAGE_VERSION_MINOR 5)
SET(PACKAGE_VERSION_REVISION 0)

PROJECT(${PACKAGE})
INCLUDE(GNUInstallDirs)

SET(CMAKE_EXPORT_COMPILE_COMMANDS 1)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

OPTION(SANITIZE_ADDRESS "Build with address sanitizer (detect invalid memory access and memory leaks)" OFF)

IF (SANITIZE_ADDRESS)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address")
ENDIF ()

IF (MSVC)
    # use all cores for compilation
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
    # avoid windows specific warnings
    ADD_DEFINITIONS("-D_CRT_SECURE_NO_WARNINGS")
ENDIF()

INCLUDE_DIRECTORIES(
    ${CMAKE_BINARY_DIR}
)

CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/config.h.in ${CMAKE_BINARY_DIR}/config.h)

SET (LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})
SET (EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})

ADD_SUBDIRECTORY(src)
