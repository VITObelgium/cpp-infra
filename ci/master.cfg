# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['buildbotNetUsageData'] = 'basic'

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.LocalWorker('opaq-worker'),
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git@github.com:binomaiheu/opaq.git',
        workdir='gitpoller-workdir', branches=['crossplatform'],
        pollinterval=10))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='crossplatform'),
                            treeStableTimer=None,
                            builderNames=["OpaqBuildDebug", "OpaqBuildRelease"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["OpaqBuildDebug", "OpaqBuildRelease", "OpaqBootstrapGcc"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

f = util.BuildFactory()
f.addStep(steps.Git(repourl='git@github.com:binomaiheu/opaq.git',
                    mode='full',
                    method='fresh',
                    branch='crossplatform')
)

f.addStep(steps.CMake(workdir='build/build',
                      definitions={'CMAKE_PREFIX_PATH': '/opt/opaq/gcc',
                                   'CMAKE_BUILD_TYPE': util.Property('config'),
                                   'BUILD_UI': 'ON'},
                      options=['..'])
)

f.addStep(steps.Compile(command=['cmake', '--build', './build']))
f.addStep(steps.Test(command=['ctest', '--output-on-failure', './build']))


bootstrapper = util.BuildFactory()
bootstrapper.addStep(steps.Git(repourl='git@github.com:binomaiheu/opaq.git',
                     mode='full',
                     method='fresh',
                     branch='crossplatform')
)

bootstrapper.addStep(steps.CMake(workdir='build/deps',
                                 definitions={'CMAKE_PREFIX_PATH': util.Interpolate('/opt/opaq/%(prop:toolchain)s'),
                                              'CMAKE_INSTALL_PREFIX': util.Interpolate('/opt/opaq/%(prop:toolchain)s'),
                                              'CMAKE_BUILD_TYPE': 'Release',
                                              'CMAKE_TOOLCHAIN_FILE': util.Interpolate('%(prop:toolchain_file)s'),
                                              'BUILD_UI': 'ON'},
                                              options=['../deps'])
)

bootstrapper.addStep(steps.Compile(command=['cmake', '--build', './deps']))
bootstrapper.addStep(steps.ShellCommand(command=['make', 'clean'], workdir='build/deps'))

c['builders'] = [
    util.BuilderConfig(name="OpaqBuildDebug", workernames=["opaq-worker"], factory=f, properties={'config': 'Debug'}),
    util.BuilderConfig(name="OpaqBuildRelease", workernames=["opaq-worker"], factory=f, properties={'config': 'Release'}),

    util.BuilderConfig(name="OpaqBootstrapGcc", workernames=["opaq-worker"], factory=bootstrapper, properties={'toolchain': 'gcc', 'toolchain_file': ''})
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Opaq"
c['titleURL'] = "https://github.com/binomaiheu/opaq.git"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
