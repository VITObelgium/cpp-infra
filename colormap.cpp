
#ifndef _USE_MATH_DEFINES
#define _USE_MATH_DEFINES
#endif

#include "infra/colormap.h"
#include "infra/exception.h"
#include "infra/string.h"

#include <cassert>
#include <cmath>

#include <unordered_map>

namespace inf {

const ColorDict Cmap::bone{
    {
        {0.0f, 0.0f, 0.0f},
        {0.746032f, 0.652778f, 0.652778f},
        {1.0f, 1.0f, 1.0f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {0.365079f, 0.319444f, 0.319444f},
        {0.746032f, 0.777778f, 0.777778f},
        {1.0f, 1.0f, 1.0f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {0.365079f, 0.444444f, 0.444444f},
        {1.0f, 1.0f, 1.0f},
    },
};

const ColorDict Cmap::cool{
    {{0.0f, 0.0f, 0.0f}, {1.0f, 1.0f, 1.0f}},
    {{0.0f, 1.0f, 1.0f}, {1.0f, 0.0f, 0.0f}},
    {{0.0f, 1.0f, 1.0f}, {1.0f, 1.0f, 1.0f}},
};

const ColorDict Cmap::copper{
    {
        {0.0f, 0.0f, 0.0f},
        {0.809524f, 1.000000f, 1.000000f},
        {1.0f, 1.0f, 1.0f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {1.0f, 0.7812f, 0.7812f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {1.0f, 0.4975f, 0.4975f},
    },
};

const ColorDict Cmap::gray{
    {
        {0.0f, 0.0f, 0.0f},
        {1.0f, 1.0f, 1.0f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {1.0f, 1.0f, 1.0f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {1.0f, 1.0f, 1.0f},
    },
};

const ColorDict Cmap::hot{
    {
        {0.0f, 0.0416f, 0.0416f},
        {0.365079f, 1.0f, 1.0f},
        {1.0f, 1.0f, 1.0f},
    },
    {
        {0.0f, 0.0f, 0.},
        {0.365079f, 0.0f, 0.0f},
        {0.746032f, 1.0f, 1.0f},
        {1.0f, 1.0f, 1.0f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {0.746032f, 0.0f, 0.0f},
        {1.0f, 1.0f, 1.0f},
    },
};

const ColorDict Cmap::hsv{
    {
        {0.0f, 1.0f, 1.0f},
        {0.158730f, 1.000000f, 1.000000f},
        {0.174603f, 0.968750f, 0.968750f},
        {0.333333f, 0.031250f, 0.031250f},
        {0.349206f, 0.000000f, 0.000000f},
        {0.666667f, 0.000000f, 0.000000f},
        {0.682540f, 0.031250f, 0.031250f},
        {0.841270f, 0.968750f, 0.968750f},
        {0.857143f, 1.000000f, 1.000000f},
        {1.0f, 1.0f, 1.0f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {0.158730f, 0.937500f, 0.937500f},
        {0.174603f, 1.000000f, 1.000000f},
        {0.507937f, 1.000000f, 1.000000f},
        {0.666667f, 0.062500f, 0.062500f},
        {0.682540f, 0.000000f, 0.000000f},
        {1.0f, 0.0f, 0.0f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {0.333333f, 0.000000f, 0.000000f},
        {0.349206f, 0.062500f, 0.062500f},
        {0.507937f, 1.000000f, 1.000000f},
        {0.841270f, 1.000000f, 1.000000f},
        {0.857143f, 0.937500f, 0.937500f},
        {1.0f, 0.09375, 0.09375},
    },
};

const ColorDict Cmap::jet{
    {
        {0.0f, 0.0f, 0.0f},
        {0.35f, 0.0f, 0.0f},
        {0.66f, 1.0f, 1.0f},
        {0.89f, 1.0f, 1.0f},
        {1.0f, 0.5f, 0.5f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {0.125f, 0.0f, 0.0f},
        {0.375f, 1.0f, 1.0f},
        {0.64f, 1.0f, 1.0f},
        {0.91f, 0.0f, 0.0f},
        {1.0f, 0.0f, 0.0f},
    },
    {
        {0.0f, 0.5f, 0.5f},
        {0.11f, 1.0f, 1.0f},
        {0.34f, 1.0f, 1.0f},
        {0.65f, 0.0f, 0.0f},
        {1.0f, 0.0f, 0.0f},
    },
};

const ColorDict Cmap::pink{
    {
        {0.0f, 0.1178f, 0.1178f},
        {0.015873f, 0.195857f, 0.195857f},
        {0.031746f, 0.250661f, 0.250661f},
        {0.047619f, 0.295468f, 0.295468f},
        {0.063492f, 0.334324f, 0.334324f},
        {0.079365f, 0.369112f, 0.369112f},
        {0.095238f, 0.400892f, 0.400892f},
        {0.111111f, 0.430331f, 0.430331f},
        {0.126984f, 0.457882f, 0.457882f},
        {0.142857f, 0.483867f, 0.483867f},
        {0.158730f, 0.508525f, 0.508525f},
        {0.174603f, 0.532042f, 0.532042f},
        {0.190476f, 0.554563f, 0.554563f},
        {0.206349f, 0.576204f, 0.576204f},
        {0.222222f, 0.597061f, 0.597061f},
        {0.238095f, 0.617213f, 0.617213f},
        {0.253968f, 0.636729f, 0.636729f},
        {0.269841f, 0.655663f, 0.655663f},
        {0.285714f, 0.674066f, 0.674066f},
        {0.301587f, 0.691980f, 0.691980f},
        {0.317460f, 0.709441f, 0.709441f},
        {0.333333f, 0.726483f, 0.726483f},
        {0.349206f, 0.743134f, 0.743134f},
        {0.365079f, 0.759421f, 0.759421f},
        {0.380952f, 0.766356f, 0.766356f},
        {0.396825f, 0.773229f, 0.773229f},
        {0.412698f, 0.780042f, 0.780042f},
        {0.428571f, 0.786796f, 0.786796f},
        {0.444444f, 0.793492f, 0.793492f},
        {0.460317f, 0.800132f, 0.800132f},
        {0.476190f, 0.806718f, 0.806718f},
        {0.492063f, 0.813250f, 0.813250f},
        {0.507937f, 0.819730f, 0.819730f},
        {0.523810f, 0.826160f, 0.826160f},
        {0.539683f, 0.832539f, 0.832539f},
        {0.555556f, 0.838870f, 0.838870f},
        {0.571429f, 0.845154f, 0.845154f},
        {0.587302f, 0.851392f, 0.851392f},
        {0.603175f, 0.857584f, 0.857584f},
        {0.619048f, 0.863731f, 0.863731f},
        {0.634921f, 0.869835f, 0.869835f},
        {0.650794f, 0.875897f, 0.875897f},
        {0.666667f, 0.881917f, 0.881917f},
        {0.682540f, 0.887896f, 0.887896f},
        {0.698413f, 0.893835f, 0.893835f},
        {0.714286f, 0.899735f, 0.899735f},
        {0.730159f, 0.905597f, 0.905597f},
        {0.746032f, 0.911421f, 0.911421f},
        {0.761905f, 0.917208f, 0.917208f},
        {0.777778f, 0.922958f, 0.922958f},
        {0.793651f, 0.928673f, 0.928673f},
        {0.809524f, 0.934353f, 0.934353f},
        {0.825397f, 0.939999f, 0.939999f},
        {0.841270f, 0.945611f, 0.945611f},
        {0.857143f, 0.951190f, 0.951190f},
        {0.873016f, 0.956736f, 0.956736f},
        {0.888889f, 0.962250f, 0.962250f},
        {0.904762f, 0.967733f, 0.967733f},
        {0.920635f, 0.973185f, 0.973185f},
        {0.936508f, 0.978607f, 0.978607f},
        {0.952381f, 0.983999f, 0.983999f},
        {0.968254f, 0.989361f, 0.989361f},
        {0.984127f, 0.994695f, 0.994695f},
        {1.0f, 1.0f, 1.0f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {0.015873f, 0.102869f, 0.102869f},
        {0.031746f, 0.145479f, 0.145479f},
        {0.047619f, 0.178174f, 0.178174f},
        {0.063492f, 0.205738f, 0.205738f},
        {0.079365f, 0.230022f, 0.230022f},
        {0.095238f, 0.251976f, 0.251976f},
        {0.111111f, 0.272166f, 0.272166f},
        {0.126984f, 0.290957f, 0.290957f},
        {0.142857f, 0.308607f, 0.308607f},
        {0.158730f, 0.325300f, 0.325300f},
        {0.174603f, 0.341178f, 0.341178f},
        {0.190476f, 0.356348f, 0.356348f},
        {0.206349f, 0.370899f, 0.370899f},
        {0.222222f, 0.384900f, 0.384900f},
        {0.238095f, 0.398410f, 0.398410f},
        {0.253968f, 0.411476f, 0.411476f},
        {0.269841f, 0.424139f, 0.424139f},
        {0.285714f, 0.436436f, 0.436436f},
        {0.301587f, 0.448395f, 0.448395f},
        {0.317460f, 0.460044f, 0.460044f},
        {0.333333f, 0.471405f, 0.471405f},
        {0.349206f, 0.482498f, 0.482498f},
        {0.365079f, 0.493342f, 0.493342f},
        {0.380952f, 0.517549f, 0.517549f},
        {0.396825f, 0.540674f, 0.540674f},
        {0.412698f, 0.562849f, 0.562849f},
        {0.428571f, 0.584183f, 0.584183f},
        {0.444444f, 0.604765f, 0.604765f},
        {0.460317f, 0.624669f, 0.624669f},
        {0.476190f, 0.643958f, 0.643958f},
        {0.492063f, 0.662687f, 0.662687f},
        {0.507937f, 0.680900f, 0.680900f},
        {0.523810f, 0.698638f, 0.698638f},
        {0.539683f, 0.715937f, 0.715937f},
        {0.555556f, 0.732828f, 0.732828f},
        {0.571429f, 0.749338f, 0.749338f},
        {0.587302f, 0.765493f, 0.765493f},
        {0.603175f, 0.781313f, 0.781313f},
        {0.619048f, 0.796819f, 0.796819f},
        {0.634921f, 0.812029f, 0.812029f},
        {0.650794f, 0.826960f, 0.826960f},
        {0.666667f, 0.841625f, 0.841625f},
        {0.682540f, 0.856040f, 0.856040f},
        {0.698413f, 0.870216f, 0.870216f},
        {0.714286f, 0.884164f, 0.884164f},
        {0.730159f, 0.897896f, 0.897896f},
        {0.746032f, 0.911421f, 0.911421f},
        {0.761905f, 0.917208f, 0.917208f},
        {0.777778f, 0.922958f, 0.922958f},
        {0.793651f, 0.928673f, 0.928673f},
        {0.809524f, 0.934353f, 0.934353f},
        {0.825397f, 0.939999f, 0.939999f},
        {0.841270f, 0.945611f, 0.945611f},
        {0.857143f, 0.951190f, 0.951190f},
        {0.873016f, 0.956736f, 0.956736f},
        {0.888889f, 0.962250f, 0.962250f},
        {0.904762f, 0.967733f, 0.967733f},
        {0.920635f, 0.973185f, 0.973185f},
        {0.936508f, 0.978607f, 0.978607f},
        {0.952381f, 0.983999f, 0.983999f},
        {0.968254f, 0.989361f, 0.989361f},
        {0.984127f, 0.994695f, 0.994695f},
        {1.0f, 1.0f, 1.0f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {0.015873f, 0.102869f, 0.102869f},
        {0.031746f, 0.145479f, 0.145479f},
        {0.047619f, 0.178174f, 0.178174f},
        {0.063492f, 0.205738f, 0.205738f},
        {0.079365f, 0.230022f, 0.230022f},
        {0.095238f, 0.251976f, 0.251976f},
        {0.111111f, 0.272166f, 0.272166f},
        {0.126984f, 0.290957f, 0.290957f},
        {0.142857f, 0.308607f, 0.308607f},
        {0.158730f, 0.325300f, 0.325300f},
        {0.174603f, 0.341178f, 0.341178f},
        {0.190476f, 0.356348f, 0.356348f},
        {0.206349f, 0.370899f, 0.370899f},
        {0.222222f, 0.384900f, 0.384900f},
        {0.238095f, 0.398410f, 0.398410f},
        {0.253968f, 0.411476f, 0.411476f},
        {0.269841f, 0.424139f, 0.424139f},
        {0.285714f, 0.436436f, 0.436436f},
        {0.301587f, 0.448395f, 0.448395f},
        {0.317460f, 0.460044f, 0.460044f},
        {0.333333f, 0.471405f, 0.471405f},
        {0.349206f, 0.482498f, 0.482498f},
        {0.365079f, 0.493342f, 0.493342f},
        {0.380952f, 0.503953f, 0.503953f},
        {0.396825f, 0.514344f, 0.514344f},
        {0.412698f, 0.524531f, 0.524531f},
        {0.428571f, 0.534522f, 0.534522f},
        {0.444444f, 0.544331f, 0.544331f},
        {0.460317f, 0.553966f, 0.553966f},
        {0.476190f, 0.563436f, 0.563436f},
        {0.492063f, 0.572750f, 0.572750f},
        {0.507937f, 0.581914f, 0.581914f},
        {0.523810f, 0.590937f, 0.590937f},
        {0.539683f, 0.599824f, 0.599824f},
        {0.555556f, 0.608581f, 0.608581f},
        {0.571429f, 0.617213f, 0.617213f},
        {0.587302f, 0.625727f, 0.625727f},
        {0.603175f, 0.634126f, 0.634126f},
        {0.619048f, 0.642416f, 0.642416f},
        {0.634921f, 0.650600f, 0.650600f},
        {0.650794f, 0.658682f, 0.658682f},
        {0.666667f, 0.666667f, 0.666667f},
        {0.682540f, 0.674556f, 0.674556f},
        {0.698413f, 0.682355f, 0.682355f},
        {0.714286f, 0.690066f, 0.690066f},
        {0.730159f, 0.697691f, 0.697691f},
        {0.746032f, 0.705234f, 0.705234f},
        {0.761905f, 0.727166f, 0.727166f},
        {0.777778f, 0.748455f, 0.748455f},
        {0.793651f, 0.769156f, 0.769156f},
        {0.809524f, 0.789314f, 0.789314f},
        {0.825397f, 0.808969f, 0.808969f},
        {0.841270f, 0.828159f, 0.828159f},
        {0.857143f, 0.846913f, 0.846913f},
        {0.873016f, 0.865261f, 0.865261f},
        {0.888889f, 0.883229f, 0.883229f},
        {0.904762f, 0.900837f, 0.900837f},
        {0.920635f, 0.918109f, 0.918109f},
        {0.936508f, 0.935061f, 0.935061f},
        {0.952381f, 0.951711f, 0.951711f},
        {0.968254f, 0.968075f, 0.968075f},
        {0.984127f, 0.984167f, 0.984167f},
        {1.0f, 1.0f, 1.0f},
    },
};

const ColorDict Cmap::spring{
    {
        {0.0f, 1.0f, 1.0f},
        {1.0f, 1.0f, 1.0f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {1.0f, 1.0f, 1.0f},
    },
    {
        {0.0f, 1.0f, 1.0f},
        {1.0f, 0.0f, 0.0f},
    },
};

const ColorDict Cmap::summer{
    {{0.0f, 0.0f, 0.0f}, {1.0f, 1.0f, 1.0f}}, // red
    {{0.0f, 0.5f, 0.5f}, {1.0f, 1.0f, 1.0f}}, // green
    {{0.0f, 0.4f, 0.4f}, {1.0f, 0.4f, 0.4f}}, // blue
};

const ColorDict Cmap::autumn{
    {{0.0f, 1.0f, 1.0f}, {1.0f, 1.0f, 1.0f}},
    {{0.0f, 0.0f, 0.0f}, {1.0f, 1.0f, 1.0f}},
    {{0.0f, 0.0f, 0.0f}, {1.0f, 0.0f, 0.0f}},
};

const ColorDict Cmap::winter{
    {{0.0f, 0.0f, 0.0f}, {1.0f, 0.0f, 0.0f}},
    {{0.0f, 0.0f, 0.0f}, {1.0f, 1.0f, 1.0f}},
    {{0.0f, 1.0f, 1.0f}, {1.0f, 0.5f, 0.5f}},
};

const ColorDict Cmap::spectral{
    {
        {0.0f, 0.0f, 0.0f},
        {0.05f, 0.4667f, 0.4667f},
        {0.10f, 0.5333f, 0.5333f},
        {0.15f, 0.0f, 0.0f},
        {0.20f, 0.0f, 0.0f},
        {0.25f, 0.0f, 0.0f},
        {0.30f, 0.0f, 0.0f},
        {0.35f, 0.0f, 0.0f},
        {0.40f, 0.0f, 0.0f},
        {0.45f, 0.0f, 0.0f},
        {0.50f, 0.0f, 0.0f},
        {0.55f, 0.0f, 0.0f},
        {0.60f, 0.0f, 0.0f},
        {0.65f, 0.7333f, 0.7333f},
        {0.70f, 0.9333f, 0.9333f},
        {0.75f, 1.0f, 1.0f},
        {0.80f, 1.0f, 1.0f},
        {0.85f, 1.0f, 1.0f},
        {0.90f, 0.8667f, 0.8667f},
        {0.95f, 0.80f, 0.80f},
        {1.0f, 0.80f, 0.80f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {0.05f, 0.0f, 0.0f},
        {0.10f, 0.0f, 0.0f},
        {0.15f, 0.0f, 0.0f},
        {0.20f, 0.0f, 0.0f},
        {0.25f, 0.4667f, 0.4667f},
        {0.30f, 0.6000f, 0.6000f},
        {0.35f, 0.6667f, 0.6667f},
        {0.40f, 0.6667f, 0.6667f},
        {0.45f, 0.6000f, 0.6000f},
        {0.50f, 0.7333f, 0.7333f},
        {0.55f, 0.8667f, 0.8667f},
        {0.60f, 1.0f, 1.0f},
        {0.65f, 1.0f, 1.0f},
        {0.70f, 0.9333f, 0.9333f},
        {0.75f, 0.8000f, 0.8000f},
        {0.80f, 0.6000f, 0.6000f},
        {0.85f, 0.0f, 0.0f},
        {0.90f, 0.0f, 0.0f},
        {0.95f, 0.0f, 0.0f},
        {1.0f, 0.80f, 0.80f},
    },
    {
        {0.0f, 0.0f, 0.0f},
        {0.05f, 0.5333f, 0.5333f},
        {0.10f, 0.6000f, 0.6000f},
        {0.15f, 0.6667f, 0.6667f},
        {0.20f, 0.8667f, 0.8667f},
        {0.25f, 0.8667f, 0.8667f},
        {0.30f, 0.8667f, 0.8667f},
        {0.35f, 0.6667f, 0.6667f},
        {0.40f, 0.5333f, 0.5333f},
        {0.45f, 0.0f, 0.0f},
        {0.5f, 0.0f, 0.0f},
        {0.55f, 0.0f, 0.0f},
        {0.60f, 0.0f, 0.0f},
        {0.65f, 0.0f, 0.0f},
        {0.70f, 0.0f, 0.0f},
        {0.75f, 0.0f, 0.0f},
        {0.80f, 0.0f, 0.0f},
        {0.85f, 0.0f, 0.0f},
        {0.90f, 0.0f, 0.0f},
        {0.95f, 0.0f, 0.0f},
        {1.0f, 0.80f, 0.80f},
    },
};

const ColorDict Cmap::gistEarth{
    {
        {0.0f, 0.0f, 0.0000f},
        {0.2824f, 0.1882f, 0.1882f},
        {0.4588f, 0.2714f, 0.2714f},
        {0.5490f, 0.4719f, 0.4719f},
        {0.6980f, 0.7176f, 0.7176f},
        {0.7882f, 0.7553f, 0.7553f},
        {1.0000f, 0.9922f, 0.9922f},
    },
    {
        {0.0f, 0.0f, 0.0000f},
        {0.0275f, 0.0000f, 0.0000f},
        {0.1098f, 0.1893f, 0.1893f},
        {0.1647f, 0.3035f, 0.3035f},
        {0.2078f, 0.3841f, 0.3841f},
        {0.2824f, 0.5020f, 0.5020f},
        {0.5216f, 0.6397f, 0.6397f},
        {0.6980f, 0.7171f, 0.7171f},
        {0.7882f, 0.6392f, 0.6392f},
        {0.7922f, 0.6413f, 0.6413f},
        {0.8000f, 0.6447f, 0.6447f},
        {0.8078f, 0.6481f, 0.6481f},
        {0.8157f, 0.6549f, 0.6549f},
        {0.8667f, 0.6991f, 0.6991f},
        {0.8745f, 0.7103f, 0.7103f},
        {0.8824f, 0.7216f, 0.7216f},
        {0.8902f, 0.7323f, 0.7323f},
        {0.8980f, 0.7430f, 0.7430f},
        {0.9412f, 0.8275f, 0.8275f},
        {0.9569f, 0.8635f, 0.8635f},
        {0.9647f, 0.8816f, 0.8816f},
        {0.9961f, 0.9733f, 0.9733f},
        {1.0000f, 0.9843f, 0.9843f},
    },
    {
        {0.0f, 0.0f, 0.0000f},
        {0.0039f, 0.1684f, 0.1684f},
        {0.0078f, 0.2212f, 0.2212f},
        {0.0275f, 0.4329f, 0.4329f},
        {0.0314f, 0.4549f, 0.4549f},
        {0.2824f, 0.5004f, 0.5004f},
        {0.4667f, 0.2748f, 0.2748f},
        {0.5451f, 0.3205f, 0.3205f},
        {0.7843f, 0.3961f, 0.3961f},
        {0.8941f, 0.6651f, 0.6651f},
        {1.0000f, 0.9843f, 0.9843f},
    },
};

const std::vector<ColorInfo> Cmap::terrain{
    {0.00f, {51, 51, 154}},
    {0.15f, {0, 154, 255}},
    {0.25f, {0, 204, 102}},
    {0.50f, {255, 255, 93}},
    {0.75f, {128, 92, 84}},
    {1.00f, {255, 255, 255}},
};

const ColorDict Cmap::gistNcar{
    {
        {0.0f, 0.0f, 0.0000f},
        {0.3098f, 0.0000f, 0.0000f},
        {0.3725f, 0.3993f, 0.3993f},
        {0.4235f, 0.5003f, 0.5003f},
        {0.5333f, 1.0000f, 1.0000f},
        {0.7922f, 1.0000f, 1.0000f},
        {0.8471f, 0.6218f, 0.6218f},
        {0.8980f, 0.9235f, 0.9235f},
        {1.0000f, 0.9961f, 0.9961f},
    },
    {
        {0.0f, 0.0f, 0.0000f},
        {0.0510f, 0.3722f, 0.3722f},
        {0.1059f, 0.0000f, 0.0000f},
        {0.1569f, 0.7202f, 0.7202f},
        {0.1608f, 0.7537f, 0.7537f},
        {0.1647f, 0.7752f, 0.7752f},
        {0.2157f, 1.0000f, 1.0000f},
        {0.2588f, 0.9804f, 0.9804f},
        {0.2706f, 0.9804f, 0.9804f},
        {0.3176f, 1.0000f, 1.0000f},
        {0.3686f, 0.8081f, 0.8081f},
        {0.4275f, 1.0000f, 1.0000f},
        {0.5216f, 1.0000f, 1.0000f},
        {0.6314f, 0.7292f, 0.7292f},
        {0.6863f, 0.2796f, 0.2796f},
        {0.7451f, 0.0000f, 0.0000f},
        {0.7922f, 0.0000f, 0.0000f},
        {0.8431f, 0.1753f, 0.1753f},
        {0.8980f, 0.5000f, 0.5000f},
        {1.0000f, 0.9725f, 0.9725f},
    },
    {
        {0.0f, 0.5020f, 0.5020f},
        {0.0510f, 0.0222f, 0.0222f},
        {0.1098f, 1.0000f, 1.0000f},
        {0.2039f, 1.0000f, 1.0000f},
        {0.2627f, 0.6145f, 0.6145f},
        {0.3216f, 0.0000f, 0.0000f},
        {0.4157f, 0.0000f, 0.0000f},
        {0.4745f, 0.2342f, 0.2342f},
        {0.5333f, 0.0000f, 0.0000f},
        {0.5804f, 0.0000f, 0.0000f},
        {0.6314f, 0.0549f, 0.0549f},
        {0.6902f, 0.0000f, 0.0000f},
        {0.7373f, 0.0000f, 0.0000f},
        {0.7922f, 0.9738f, 0.9738f},
        {0.8000f, 1.0000f, 1.0000f},
        {0.8431f, 1.0000f, 1.0000f},
        {0.8980f, 0.9341f, 0.9341f},
        {1.0000f, 0.9961f, 0.9961f},
    },
};

// _gist_rainbow_data = ((0.000, (1.00, 0.00, 0.16)),
//                       (0.030, (1.00, 0.00, 0.00)),
//                       (0.215, (1.00, 1.00, 0.00)),
//                       (0.400, (0.00, 1.00, 0.00)),
//                       (0.586, (0.00, 1.00, 1.00)),
//                       (0.770, (0.00, 0.00, 1.00)),
//                       (0.954, (1.00, 0.00, 1.00)),
//                       (1.000, (1.00, 0.00, 0.75)))

const ColorDict Cmap::gistStern{
    {
        {0.000f, 0.000f, 0.000f},
        {0.0547f, 1.000f, 1.000f},
        {0.250f, 0.027f, 0.250f},
        {1.000f, 1.000f, 1.000f},
    },
    {
        {0, 0, 0},
        {1, 1, 1},
    },
    {
        {0.000f, 0.000f, 0.000f},
        {0.500f, 1.000f, 1.000f},
        {0.735f, 0.000f, 0.000f},
        {1.000f, 1.000f, 1.000f},
    },
};

const std::vector<Color> Cmap::Blues{
    {
        {247, 251, 255},
        {222, 235, 247},
        {198, 219, 239},
        {158, 202, 225},
        {107, 174, 214},
        {66, 146, 198},
        {33, 113, 181},
        {8, 81, 156},
        {8, 48, 107},
    },
};

const std::vector<Color> Cmap::BrBG{
    {
        {84, 48, 5},
        {140, 81, 10},
        {191, 129, 45},
        {223, 194, 125},
        {246, 232, 195},
        {245, 245, 245},
        {199, 234, 229},
        {128, 205, 193},
        {53, 151, 143},
        {1, 102, 94},
        {0, 60, 48},
    },
};

const std::vector<Color> Cmap::BuGn{
    {
        {247, 252, 253},
        {229, 245, 249},
        {204, 236, 230},
        {153, 216, 201},
        {102, 194, 164},
        {65, 174, 118},
        {35, 139, 69},
        {0, 109, 44},
        {0, 68, 27},
    },
};

const std::vector<Color> Cmap::BuPu{
    {
        {247, 252, 253},
        {224, 236, 244},
        {191, 211, 230},
        {158, 188, 218},
        {140, 150, 198},
        {140, 107, 177},
        {136, 65, 157},
        {129, 15, 124},
        {77, 0, 75},
    },
};

const std::vector<Color> Cmap::GnBu{
    {
        {247, 252, 240},
        {224, 243, 219},
        {204, 235, 197},
        {168, 221, 181},
        {123, 204, 196},
        {78, 179, 211},
        {43, 140, 190},
        {8, 104, 172},
        {8, 64, 129},
    },
};

const std::vector<Color> Cmap::Greens{
    {
        {247, 252, 245},
        {229, 245, 224},
        {199, 233, 192},
        {161, 217, 155},
        {116, 196, 118},
        {65, 171, 93},
        {35, 139, 69},
        {0, 109, 44},
        {0, 68, 27},
    },
};

const std::vector<Color> Cmap::Greys{
    {
        {255, 255, 255},
        {240, 240, 240},
        {217, 217, 217},
        {189, 189, 189},
        {150, 150, 150},
        {115, 115, 115},
        {82, 82, 82},
        {37, 37, 37},
        {0, 0, 0},
    },
};

const std::vector<Color> Cmap::Oranges{
    {
        {255, 245, 235},
        {254, 230, 206},
        {253, 208, 162},
        {253, 174, 107},
        {253, 141, 60},
        {241, 105, 19},
        {217, 72, 1},
        {166, 54, 3},
        {127, 39, 4},
    },
};

const std::vector<Color> Cmap::OrRd{
    {
        {255, 247, 236},
        {254, 232, 200},
        {253, 212, 158},
        {253, 187, 132},
        {252, 141, 89},
        {239, 101, 72},
        {215, 48, 31},
        {179, 0, 0},
        {127, 0, 0},
    },
};

const std::vector<Color> Cmap::PiYG{
    {
        {142, 1, 82},
        {197, 27, 125},
        {222, 119, 174},
        {241, 182, 218},
        {253, 224, 239},
        {247, 247, 247},
        {230, 245, 208},
        {184, 225, 134},
        {127, 188, 65},
        {77, 146, 33},
        {39, 100, 25},
    },
};

const std::vector<Color> Cmap::PRGn{
    {
        {64, 0, 75},
        {118, 42, 131},
        {153, 112, 171},
        {194, 165, 207},
        {231, 212, 232},
        {247, 247, 247},
        {217, 240, 211},
        {166, 219, 160},
        {90, 174, 97},
        {27, 120, 55},
        {0, 68, 27},
    },
};

const std::vector<Color> Cmap::PuBu{
    {
        {255, 247, 251},
        {236, 231, 242},
        {208, 209, 230},
        {166, 189, 219},
        {116, 169, 207},
        {54, 144, 192},
        {5, 112, 176},
        {4, 90, 141},
        {2, 56, 88},
    },
};

const std::vector<Color> Cmap::PuBuGn{
    {
        {255, 247, 251},
        {236, 226, 240},
        {208, 209, 230},
        {166, 189, 219},
        {103, 169, 207},
        {54, 144, 192},
        {2, 129, 138},
        {1, 108, 89},
        {1, 70, 54},
    },
};

const std::vector<Color> Cmap::PuOr{
    {
        {127, 59, 8},
        {179, 88, 6},
        {224, 130, 20},
        {253, 184, 99},
        {254, 224, 182},
        {247, 247, 247},
        {216, 218, 235},
        {178, 171, 210},
        {128, 115, 172},
        {84, 39, 136},
        {45, 0, 75},
    },
};

const std::vector<Color> Cmap::PuRd{
    {
        {247, 244, 249},
        {231, 225, 239},
        {212, 185, 218},
        {201, 148, 199},
        {223, 101, 176},
        {231, 41, 138},
        {206, 18, 86},
        {152, 0, 67},
        {103, 0, 31},
    },
};

const std::vector<Color> Cmap::Purples{
    {
        {252, 251, 253},
        {239, 237, 245},
        {218, 218, 235},
        {188, 189, 220},
        {158, 154, 200},
        {128, 125, 186},
        {106, 81, 163},
        {84, 39, 143},
        {63, 0, 125},
    },
};

const std::vector<Color> Cmap::RdBu{
    {
        {252, 251, 253},
        {239, 237, 245},
        {218, 218, 235},
        {188, 189, 220},
        {158, 154, 200},
        {128, 125, 186},
        {106, 81, 163},
        {84, 39, 143},
        {63, 0, 125},
    },
};

const std::vector<Color> Cmap::RdGy{
    {
        {103, 0, 31},
        {178, 24, 43},
        {214, 96, 77},
        {244, 165, 130},
        {253, 219, 199},
        {255, 255, 255},
        {224, 224, 224},
        {186, 186, 186},
        {135, 135, 135},
        {77, 77, 77},
        {26, 26, 26},
    },
};

const std::vector<Color> Cmap::RdPu{
    {
        {255, 247, 243},
        {253, 224, 221},
        {252, 197, 192},
        {250, 159, 181},
        {247, 104, 161},
        {221, 52, 151},
        {174, 1, 126},
        {122, 1, 119},
        {73, 0, 106},
    },
};

const std::vector<Color> Cmap::RdYlBu{
    {
        {165, 0, 38},
        {215, 48, 39},
        {244, 109, 67},
        {253, 174, 97},
        {254, 224, 144},
        {255, 255, 191},
        {224, 243, 248},
        {171, 217, 233},
        {116, 173, 209},
        {69, 117, 180},
        {49, 54, 149},
    },
};

const std::vector<Color> Cmap::RdYlGn{
    {
        {165, 0, 38},
        {215, 48, 39},
        {244, 109, 67},
        {253, 174, 97},
        {254, 224, 139},
        {255, 255, 191},
        {217, 239, 139},
        {166, 217, 106},
        {102, 189, 99},
        {26, 152, 80},
        {0, 104, 55},
    },
};

const std::vector<Color> Cmap::Reds{
    {
        {255, 245, 240},
        {254, 224, 210},
        {252, 187, 161},
        {252, 146, 114},
        {251, 106, 74},
        {239, 59, 44},
        {203, 24, 29},
        {165, 15, 21},
        {103, 0, 13},
    },
};

const std::vector<Color> Cmap::Spectral{
    {
        {158, 1, 66},
        {213, 62, 79},
        {244, 109, 67},
        {253, 174, 97},
        {254, 224, 139},
        {255, 255, 191},
        {230, 245, 152},
        {171, 221, 164},
        {102, 194, 165},
        {50, 136, 189},
        {94, 79, 162},
    },
};

const std::vector<Color> Cmap::YlGn{
    {
        {255, 255, 229},
        {247, 252, 185},
        {217, 240, 163},
        {173, 221, 142},
        {120, 198, 121},
        {65, 171, 93},
        {35, 132, 67},
        {0, 104, 55},
        {0, 69, 41},
    },
};

const std::vector<Color> Cmap::YlGnBu{
    {
        {255, 255, 217},
        {237, 248, 177},
        {199, 233, 180},
        {127, 205, 187},
        {65, 182, 196},
        {29, 145, 192},
        {34, 94, 168},
        {37, 52, 148},
        {8, 29, 88},
    },
};

const std::vector<Color> Cmap::YlOrBr{
    {
        {255, 255, 229},
        {255, 247, 188},
        {254, 227, 145},
        {254, 196, 79},
        {254, 153, 41},
        {236, 112, 20},
        {204, 76, 2},
        {153, 52, 4},
        {102, 37, 6},
    },
};

const std::vector<Color> Cmap::YlOrRd{
    {
        {255, 255, 204},
        {255, 237, 160},
        {254, 217, 118},
        {254, 178, 76},
        {253, 141, 60},
        {252, 78, 42},
        {227, 26, 28},
        {189, 0, 38},
        {128, 0, 38},
    },
};

// Qualitative maps
const std::vector<Color> Cmap::Accent{
    {
        {127, 201, 127},
        {190, 174, 212},
        {253, 192, 134},
        {255, 255, 153},
        {56, 108, 176},
        {240, 2, 127},
        {191, 91, 23},
        {102, 102, 102},
    },
};

const std::vector<Color> Cmap::Dark2{
    {
        {27, 158, 119},
        {217, 95, 2},
        {117, 112, 179},
        {231, 41, 138},
        {102, 166, 30},
        {230, 171, 2},
        {166, 118, 29},
        {102, 102, 102},
    },
};

const std::vector<Color> Cmap::Paired{
    {
        {166, 206, 227},
        {31, 120, 180},
        {178, 223, 138},
        {51, 160, 44},
        {251, 154, 153},
        {227, 26, 28},
        {253, 191, 111},
        {255, 127, 0},
        {202, 178, 214},
        {106, 61, 154},
        {255, 255, 153},
        {177, 89, 40},
    },
};

const std::vector<Color> Cmap::Pastel1{
    {
        {251, 180, 174},
        {179, 205, 227},
        {204, 235, 197},
        {222, 203, 228},
        {254, 217, 166},
        {255, 255, 204},
        {229, 216, 189},
        {253, 218, 236},
        {242, 242, 242},
    },
};

const std::vector<Color> Cmap::Pastel2{
    {
        {179, 226, 205},
        {253, 205, 172},
        {203, 213, 232},
        {244, 202, 228},
        {230, 245, 201},
        {255, 242, 174},
        {241, 226, 204},
        {204, 204, 204},
    },
};

const std::vector<Color> Cmap::Set1{
    {
        {228, 26, 28},
        {55, 126, 184},
        {77, 175, 74},
        {152, 78, 163},
        {255, 127, 0},
        {255, 255, 51},
        {166, 86, 40},
        {247, 129, 191},
        {153, 153, 153},
    },
};

const std::vector<Color> Cmap::Set2{
    {
        {102, 194, 165},
        {252, 141, 98},
        {141, 160, 203},
        {231, 138, 195},
        {166, 216, 84},
        {255, 217, 47},
        {229, 196, 148},
        {179, 179, 179},
    },
};

const std::vector<Color> Cmap::Set3{
    {
        {141, 211, 199},
        {255, 255, 179},
        {190, 186, 218},
        {251, 128, 114},
        {128, 177, 211},
        {253, 180, 98},
        {179, 222, 105},
        {252, 205, 229},
        {217, 217, 217},
        {188, 128, 189},
        {204, 235, 197},
        {255, 237, 111},
    },
};

// Qualitative maps from https://github.com/vega/vega/wiki/Scales
const std::vector<Color> Cmap::Tab10{{
    {31, 119, 180},  // #1f77b4
    {255, 127, 14},  // #ff7f0e
    {44, 160, 44},   // #2ca02c
    {214, 39, 40},   // #d62728
    {148, 103, 189}, // #9467bd
    {140, 86, 75},   // #8c564b
    {227, 119, 194}, // #e377c2
    {127, 127, 127}, // #7f7f7f
    {188, 189, 34},  // #bcbd22
    {23, 190, 207},  // #17becf
}};

const std::vector<Color> Cmap::Tab20{{
    {31, 119, 180},  // #1f77b4
    {174, 199, 232}, // #aec7e8
    {255, 127, 14},  // #ff7f0e
    {255, 187, 120}, // #ffbb78
    {44, 160, 44},   // #2ca02c
    {152, 223, 138}, // #98df8a
    {214, 39, 40},   // #d62728
    {255, 152, 150}, // #ff9896
    {148, 103, 189}, // #9467bd
    {197, 176, 213}, // #c5b0d5
    {140, 86, 75},   // #8c564b
    {196, 156, 148}, // #c49c94
    {227, 119, 194}, // #e377c2
    {247, 182, 210}, // #f7b6d2
    {127, 127, 127}, // #7f7f7f
    {199, 199, 199}, // #c7c7c7
    {188, 189, 34},  // #bcbd22
    {219, 219, 141}, // #dbdb8d
    {23, 190, 207},  // #17becf
    {158, 218, 229}, // #9edae5
}};

const std::vector<Color> Cmap::Tab20b{{
    {57, 59, 121},   // #393b79
    {82, 84, 163},   // #5254a3
    {107, 110, 207}, // #6b6ecf
    {156, 158, 222}, // #9c9ede
    {99, 121, 57},   // #637939
    {140, 162, 82},  // #8ca252
    {181, 207, 107}, // #b5cf6b
    {206, 219, 156}, // #cedb9c
    {140, 109, 49},  // #8c6d31
    {189, 158, 57},  // #bd9e39
    {231, 186, 82},  // #e7ba52
    {231, 203, 148}, // #e7cb94
    {132, 60, 57},   // #843c39
    {173, 73, 74},   // #ad494a
    {214, 97, 107},  // #d6616b
    {231, 150, 156}, // #e7969c
    {123, 65, 115},  // #7b4173
    {165, 81, 148},  // #a55194
    {206, 109, 189}, // #ce6dbd
    {222, 158, 214}, // #de9ed6
}};

const std::vector<Color> Cmap::Tab20c{{
    {49, 130, 189},  // #3182bd
    {107, 174, 214}, // #6baed6
    {158, 202, 225}, // #9ecae1
    {198, 219, 239}, // #c6dbef
    {230, 85, 13},   // #e6550d
    {253, 141, 60},  // #fd8d3c
    {253, 174, 107}, // #fdae6b
    {253, 208, 162}, // #fdd0a2
    {49, 163, 84},   // #31a354
    {116, 196, 118}, // #74c476
    {161, 217, 155}, // #a1d99b
    {199, 233, 192}, // #c7e9c0
    {117, 107, 177}, // #756bb1
    {158, 154, 200}, // #9e9ac8
    {188, 189, 220}, // #bcbddc
    {218, 218, 235}, // #dadaeb
    {99, 99, 99},    // #636363
    {150, 150, 150}, // #969696
    {189, 189, 189}, // #bdbdbd
    {217, 217, 217}, // #d9d9d9
}};

const std::vector<Color> Cmap::Turbo{{
    {48, 18, 59},
    {50, 21, 67},
    {51, 24, 74},
    {52, 27, 81},
    {53, 30, 88},
    {54, 33, 95},
    {55, 36, 102},
    {56, 39, 109},
    {57, 42, 115},
    {58, 45, 121},
    {59, 47, 128},
    {60, 50, 134},
    {61, 53, 139},
    {62, 56, 145},
    {63, 59, 151},
    {63, 62, 156},
    {64, 64, 162},
    {65, 67, 167},
    {65, 70, 172},
    {66, 73, 177},
    {66, 75, 181},
    {67, 78, 186},
    {68, 81, 191},
    {68, 84, 195},
    {68, 86, 199},
    {69, 89, 203},
    {69, 92, 207},
    {69, 94, 211},
    {70, 97, 214},
    {70, 100, 218},
    {70, 102, 221},
    {70, 105, 224},
    {70, 107, 227},
    {71, 110, 230},
    {71, 113, 233},
    {71, 115, 235},
    {71, 118, 238},
    {71, 120, 240},
    {71, 123, 242},
    {70, 125, 244},
    {70, 128, 246},
    {70, 130, 248},
    {70, 133, 250},
    {70, 135, 251},
    {69, 138, 252},
    {69, 140, 253},
    {68, 143, 254},
    {67, 145, 254},
    {66, 148, 255},
    {65, 150, 255},
    {64, 153, 255},
    {62, 155, 254},
    {61, 158, 254},
    {59, 160, 253},
    {58, 163, 252},
    {56, 165, 251},
    {55, 168, 250},
    {53, 171, 248},
    {51, 173, 247},
    {49, 175, 245},
    {47, 178, 244},
    {46, 180, 242},
    {44, 183, 240},
    {42, 185, 238},
    {40, 188, 235},
    {39, 190, 233},
    {37, 192, 231},
    {35, 195, 228},
    {34, 197, 226},
    {32, 199, 223},
    {31, 201, 221},
    {30, 203, 218},
    {28, 205, 216},
    {27, 208, 213},
    {26, 210, 210},
    {26, 212, 208},
    {25, 213, 205},
    {24, 215, 202},
    {24, 217, 200},
    {24, 219, 197},
    {24, 221, 194},
    {24, 222, 192},
    {24, 224, 189},
    {25, 226, 187},
    {25, 227, 185},
    {26, 228, 182},
    {28, 230, 180},
    {29, 231, 178},
    {31, 233, 175},
    {32, 234, 172},
    {34, 235, 170},
    {37, 236, 167},
    {39, 238, 164},
    {42, 239, 161},
    {44, 240, 158},
    {47, 241, 155},
    {50, 242, 152},
    {53, 243, 148},
    {56, 244, 145},
    {60, 245, 142},
    {63, 246, 138},
    {67, 247, 135},
    {70, 248, 132},
    {74, 248, 128},
    {78, 249, 125},
    {82, 250, 122},
    {85, 250, 118},
    {89, 251, 115},
    {93, 252, 111},
    {97, 252, 108},
    {101, 253, 105},
    {105, 253, 102},
    {109, 254, 98},
    {113, 254, 95},
    {117, 254, 92},
    {121, 254, 89},
    {125, 255, 86},
    {128, 255, 83},
    {132, 255, 81},
    {136, 255, 78},
    {139, 255, 75},
    {143, 255, 73},
    {146, 255, 71},
    {150, 254, 68},
    {153, 254, 66},
    {156, 254, 64},
    {159, 253, 63},
    {161, 253, 61},
    {164, 252, 60},
    {167, 252, 58},
    {169, 251, 57},
    {172, 251, 56},
    {175, 250, 55},
    {177, 249, 54},
    {180, 248, 54},
    {183, 247, 53},
    {185, 246, 53},
    {188, 245, 52},
    {190, 244, 52},
    {193, 243, 52},
    {195, 241, 52},
    {198, 240, 52},
    {200, 239, 52},
    {203, 237, 52},
    {205, 236, 52},
    {208, 234, 52},
    {210, 233, 53},
    {212, 231, 53},
    {215, 229, 53},
    {217, 228, 54},
    {219, 226, 54},
    {221, 224, 55},
    {223, 223, 55},
    {225, 221, 55},
    {227, 219, 56},
    {229, 217, 56},
    {231, 215, 57},
    {233, 213, 57},
    {235, 211, 57},
    {236, 209, 58},
    {238, 207, 58},
    {239, 205, 58},
    {241, 203, 58},
    {242, 201, 58},
    {244, 199, 58},
    {245, 197, 58},
    {246, 195, 58},
    {247, 193, 58},
    {248, 190, 57},
    {249, 188, 57},
    {250, 186, 57},
    {251, 184, 56},
    {251, 182, 55},
    {252, 179, 54},
    {252, 177, 54},
    {253, 174, 53},
    {253, 172, 52},
    {254, 169, 51},
    {254, 167, 50},
    {254, 164, 49},
    {254, 161, 48},
    {254, 158, 47},
    {254, 155, 45},
    {254, 153, 44},
    {254, 150, 43},
    {254, 147, 42},
    {254, 144, 41},
    {253, 141, 39},
    {253, 138, 38},
    {252, 135, 37},
    {252, 132, 35},
    {251, 129, 34},
    {251, 126, 33},
    {250, 123, 31},
    {249, 120, 30},
    {249, 117, 29},
    {248, 114, 28},
    {247, 111, 26},
    {246, 108, 25},
    {245, 105, 24},
    {244, 102, 23},
    {243, 99, 21},
    {242, 96, 20},
    {241, 93, 19},
    {240, 91, 18},
    {239, 88, 17},
    {237, 85, 16},
    {236, 83, 15},
    {235, 80, 14},
    {234, 78, 13},
    {232, 75, 12},
    {231, 73, 12},
    {229, 71, 11},
    {228, 69, 10},
    {226, 67, 10},
    {225, 65, 9},
    {223, 63, 8},
    {221, 61, 8},
    {220, 59, 7},
    {218, 57, 7},
    {216, 55, 6},
    {214, 53, 6},
    {212, 51, 5},
    {210, 49, 5},
    {208, 47, 5},
    {206, 45, 4},
    {204, 43, 4},
    {202, 42, 4},
    {200, 40, 3},
    {197, 38, 3},
    {195, 37, 3},
    {193, 35, 2},
    {190, 33, 2},
    {188, 32, 2},
    {185, 30, 2},
    {183, 29, 2},
    {180, 27, 1},
    {178, 26, 1},
    {175, 24, 1},
    {172, 23, 1},
    {169, 22, 1},
    {167, 20, 1},
    {164, 19, 1},
    {161, 18, 1},
    {158, 16, 1},
    {155, 15, 1},
    {152, 14, 1},
    {149, 13, 1},
    {146, 11, 1},
    {142, 10, 1},
    {139, 9, 2},
    {136, 8, 2},
    {133, 7, 2},
    {129, 6, 2},
    {126, 5, 2},
    {122, 4, 3},
}};

static auto mapper33 = [](double x) -> uint8_t {
    int32_t val = static_cast<int32_t>(std::round(std::abs(2.0 * x - 0.5) * 255.0));
    return static_cast<uint8_t>(std::clamp(val, 0, 255));
};

static auto mapper13 = [](double x) -> uint8_t {
    int32_t val = static_cast<int32_t>(std::round(std::sin(x * M_PI) * 255.0));
    return static_cast<uint8_t>(std::clamp(val, 0, 255));
};

static auto mapper10 = [](double x) -> uint8_t {
    int32_t val = static_cast<int32_t>(std::round(std::cos(x * M_PI / 2.0) * 255.0));
    return static_cast<uint8_t>(std::clamp(val, 0, 255));
};

const ColorMapper Cmap::rainbow{std::function<uint8_t(double)>(mapper33), std::function<uint8_t(double)>(mapper13), std::function<uint8_t(double)>(mapper10)};

static uint8_t remap(float start, float end, float mapStart, float mapEnd, float value)
{
    assert(start < end);
    assert(mapStart >= 0.f && mapStart <= 1.f);
    assert(mapEnd >= 0.f && mapEnd <= 1.f);

    if (mapStart == mapEnd) {
        return static_cast<uint8_t>(mapStart * 255.f);
    }

    const auto rangeWidth = end - start;
    const auto pos        = (value - start) / rangeWidth;

    const auto mapWidth = mapEnd - mapStart;
    return static_cast<uint8_t>(std::round((mapStart + (mapWidth * pos)) * 255.f));
}

static ColorDict colorlist_to_dict(const std::vector<Color>& clist)
{
    assert(clist.size() > 1);

    ColorDict cdict;
    const auto bandWidth = 1.f / (clist.size() - 1);
    float val            = 0.f;
    for (auto& color : clist) {
        const auto r = color.r / 255.f;
        const auto g = color.g / 255.f;
        const auto b = color.b / 255.f;
        cdict.red.push_back({val, r, r});
        cdict.green.push_back({val, g, g});
        cdict.blue.push_back({val, b, b});

        val += bandWidth;
    }

    return cdict;
}

static ColorDict colorlist_to_dict(const std::vector<ColorInfo>& clist)
{
    assert(clist.size() > 1);

    ColorDict cdict;
    for (auto& colorInfo : clist) {
        const auto r = colorInfo.color.r / 255.f;
        const auto g = colorInfo.color.g / 255.f;
        const auto b = colorInfo.color.b / 255.f;
        cdict.red.push_back({colorInfo.start, r, r});
        cdict.green.push_back({colorInfo.start, g, g});
        cdict.blue.push_back({colorInfo.start, b, b});
    }

    return cdict;
}

ColorMap::ColorMap(const ColorDict& cdict, bool reverse)
{
    auto mapValue = [this, &cdict](size_t index) {
        const auto value = static_cast<float>(index) / (_cmap.size() - 1);
        return Color(process_band(value, cdict.red), process_band(value, cdict.green), process_band(value, cdict.blue));
    };

    size_t index = 0;
    if (reverse) {
        for (auto iter = rbegin(_cmap); iter != rend(_cmap); ++iter) {
            *iter = mapValue(index++);
        }
    } else {
        for (auto iter = begin(_cmap); iter != end(_cmap); ++iter) {
            *iter = mapValue(index++);
        }
    }
}

ColorMap::ColorMap(const std::vector<Color>& clist, bool reverse)
: ColorMap(colorlist_to_dict(clist), reverse)
{
}

ColorMap::ColorMap(const std::vector<ColorInfo>& clist, bool reverse)
: ColorMap(colorlist_to_dict(clist), reverse)
{
}

ColorMap::ColorMap(const std::array<Color, 256>& cmap, bool reverse)
{
    if (reverse) {
        std::copy(rbegin(cmap), rend(cmap), begin(_cmap));
    } else {
        std::copy(begin(cmap), end(cmap), begin(_cmap));
    }
}

ColorMap::ColorMap(const ColorMapper& cmap, bool reverse)
{
    std::array<Color, 256> values;
    for (size_t i = 0; i < _cmap.size(); ++i) {
        double mapVal = i / 255.0;
        values[i]     = Color(cmap.red(mapVal), cmap.green(mapVal), cmap.blue(mapVal));
    }

    if (reverse) {
        std::copy(rbegin(values), rend(values), begin(_cmap));
    } else {
        _cmap = values;
    }
}

ColorMap ColorMap::qualitative(const std::vector<Color>& clist)
{
    std::array<Color, 256> cmap;
    for (size_t i = 0; i < cmap.size(); ++i) {
        const auto index = static_cast<int>(static_cast<float>(i) / cmap.size() * clist.size());
        cmap[i]          = clist[index];
    }

    return ColorMap(cmap);
}

ColorMap ColorMap::create(std::string_view name)
{
    bool reverse          = false;
    std::string lowername = str::lowercase(name);
    if (str::ends_with(lowername, "_r")) {
        reverse = true;
        lowername.resize(lowername.size() - 2);
    }

    static const std::unordered_map<std::string, const ColorDict&> cmapLookup1 = {
        {"bone", Cmap::bone},
        {"cool", Cmap::cool},
        {"copper", Cmap::copper},
        {"gray", Cmap::gray},
        {"hot", Cmap::hot},
        {"hsv", Cmap::hsv},
        {"pink", Cmap::pink},
        {"jet", Cmap::jet},
        {"spring", Cmap::spring},
        {"summer", Cmap::summer},
        {"autumn", Cmap::autumn},
        {"winter", Cmap::winter},
        {"spectral", Cmap::spectral},
        {"gist_earth", Cmap::gistEarth},
        {"gist_ncar", Cmap::gistNcar},
        {"gist_stern", Cmap::gistStern},
    };

    static const std::unordered_map<std::string, const std::vector<Color>&> cmapLookup2 = {
        {"blues", Cmap::Blues},
        {"brbg", Cmap::BrBG},
        {"bugn", Cmap::BuGn},
        {"bupu", Cmap::BuPu},
        {"gnbu", Cmap::GnBu},
        {"greens", Cmap::Greens},
        {"greys", Cmap::Greys},
        {"oranges", Cmap::Oranges},
        {"orrd", Cmap::OrRd},
        {"piyg", Cmap::PiYG},
        {"prgn", Cmap::PRGn},
        {"pubu", Cmap::PuBu},
        {"pubugn", Cmap::PuBuGn},
        {"puor", Cmap::PuOr},
        {"purd", Cmap::PuRd},
        {"purples", Cmap::Purples},
        {"rdbu", Cmap::RdBu},
        {"rdgy", Cmap::RdGy},
        {"rdpu", Cmap::RdPu},
        {"rdylbu", Cmap::RdYlBu},
        {"rdylgn", Cmap::RdYlGn},
        {"reds", Cmap::Reds},
        {"spectral", Cmap::Spectral},
        {"ylgn", Cmap::YlGn},
        {"ylgnbu", Cmap::YlGnBu},
        {"ylorbr", Cmap::YlOrBr},
        {"ylorrd", Cmap::YlOrRd},
        {"turbo", Cmap::Turbo},
        {"accent", Cmap::Accent},
        {"dark2", Cmap::Dark2},
        {"paired", Cmap::Paired},
        {"pastel1", Cmap::Pastel1},
        {"pastel2", Cmap::Pastel2},
        {"set1", Cmap::Set1},
        {"set2", Cmap::Set2},
        {"set3", Cmap::Set3},
        {"tab10", Cmap::Tab10},
        {"tab20", Cmap::Tab20},
        {"tab20b", Cmap::Tab20b},
        {"tab20c", Cmap::Tab20c},
    };

    static const std::unordered_map<std::string, const std::vector<ColorInfo>&> cmapLookup3 = {
        {"terrain", Cmap::terrain},
    };

    static const std::unordered_map<std::string, const ColorMapper&> cmapLookup4 = {
        {"rainbow", Cmap::rainbow},
    };

    if (cmapLookup1.find(lowername) != cmapLookup1.end()) {
        return ColorMap(cmapLookup1.at(lowername), reverse);
    } else if (cmapLookup2.find(lowername) != cmapLookup2.end()) {
        return ColorMap(cmapLookup2.at(lowername), reverse);
    } else if (cmapLookup3.find(lowername) != cmapLookup3.end()) {
        return ColorMap(cmapLookup3.at(lowername), reverse);
    } else if (cmapLookup4.find(lowername) != cmapLookup4.end()) {
        return ColorMap(cmapLookup4.at(lowername), reverse);
    } else {
        throw InvalidArgument("Unsupported color map: {}", name);
    }
}

const Color& ColorMap::get_color(float value) const noexcept
{
    return _cmap[static_cast<uint8_t>(std::round(value * 255))];
}

const Color& ColorMap::get_color(uint8_t value) const noexcept
{
    return _cmap[value];
}

uint8_t ColorMap::process_band(float value, const std::vector<ColorDict::Entry>& dict) const noexcept
{
    assert(dict.size() >= 2);

    for (size_t i = 0; i < dict.size() - 1; ++i) {
        if (value >= dict[i].x && value < dict[i + 1].x) {
            return remap(dict[i].x, dict[i + 1].x, dict[i].y1, dict[i + 1].y0, value);
        }
    }

    if (value == dict.back().x) {
        auto i = dict.size() - 2;
        return remap(dict[i].x, dict[i + 1].x, dict[i].y1, dict[i + 1].y0, value);
    }

    return 0;
}

}
