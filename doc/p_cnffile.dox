/**
   \page p_cnf_file The OPAQ configuration file(s)
   
   OPAQ uses a deployment-specific master configuration file which tells the framework what is available
   in terms of plugins, components...

   It is possible to include external XML files in the configuration tags for configuring OPAQ components via: 

\code{.xml}
<config ref="some_external_file.xml">
</config>
\endcode

   This is off course optional and a user can choose to put the acutal XML configuration inside the "<config>" element
   in the master file as well.

   There are a number of sections in the master configuration file, for which the default name is opaq-config.xml.
   Below we show the main structure. 

\code{.xml}
<?xml version="1.0" ?>
<opaq>
  <!-- Master OPAQ configuration settings -->
  <pollutants>
    <pollutant id="81102" name="pm10" unit="ug/m3">PM with diameter below 10 um</pollutant>
    <pollutant id="81104" name="pm25" unit="ug/m3">PM with diameter &lt; 2.5 um</pollutant>
    <pollutant id="42602" name="no2" unit="ug/m3">Nitrogen dioxide</pollutant>
    <pollutant id="42401" name="so2" unit="ug/m3">Sulphur dioxide</pollutant>
  </pollutants>

  <plugins>
    <!-- adding the root path for the location of the plugins -->
    <path>/home/bino/local/lib/opaq</path>

    <!-- give list of plugin components... -->
    <plugin name="meteoPlugin">IRCELMeteoProvider.so</plugin>
    <plugin name="obsPlugin">RioObsProvider.so</plugin>
    <plugin name="netPlugin">XMLAQNetProvider.so</plugin>
    <plugin name="h5dbPlugin">Hdf5Buffer.so</plugin>
    <plugin name="AsciiForecastWriterPlugin">AsciiForecastWriter.so</plugin>

    <plugin name="OVL_model1">OVL_IRCEL_model1.so</plugin>
    <plugin name="OVL_model2">OVL_IRCEL_model2.so</plugin>
    <plugin name="OVL_model3">OVL_IRCEL_model3.so</plugin>
    <plugin name="OVL">OVL.so</plugin>
  </plugins>

  <components ref="etc/components.xml" />

  <!-- Run configuration -->
  <runconfig  ref="etc/runconfig.xml" />
</opaq>
\endcode

So cleary we see a number of differnent sections, in the given example we have chosen to include the
pollutant specification and plugins into the main file, but for the components and run configuration
we refer to a second file in which the acutal runconfiguration is stored. It's up to the user to
organise the configuration files. 


The most important section is off course the run configuration, this determines how the OPAQ engine will
run. We show an example run configuration below here :

\code{.xml}
<?xml version="1.0" ?>
<runconfig>
        
  <!-- pollutant to use: can be overridden by command line arguments,
       in that case the value provided here is ignored -->
  <pollutant>pm10</pollutant>

  <!-- set aggregation time -->
  <aggregation>da</aggregation>
  
  <!-- base times to use: can be overridden by command line arguments,
       in that case the value provided here is ignored -->
  <basetimes>
    <basetime>2014-03-01 00:00:00</basetime>
    <basetime>2014-03-02 00:00:00</basetime>
    <basetime>2014-03-03 00:00:00</basetime>
  </basetimes>

  <!-- AQNetworkProvider to use -->
  <network>
    <component>net</component>
  </network>

  <!-- Forecast configuration -->
  <forecast>
    <!-- forecast horizon for running the models, 4 is up to day+4 -->
    <horizon>4</horizon>

    <models>
      <component>OVL_model1_9UT</component>
      <component>OVL_model2_9UT</component>
      <component>OVL_model3_9UT</component>
      <component>OVL</component>
    </models>
    
    <input>
      <!-- Data provider to use for the observations -->
      <observations>obs</observations>

      <!-- Data provider to use for the meteo -->
      <meteo>meteo</meteo>
      
    </input>
    
    <!-- Data buffer for the model output -->
    <buffer>h5db</buffer>
    
    <!-- output writer -->
    <output>AsciiForecastWriter</output>
      
  </forecast>

</runconfig>
\endcode


*/
