diff --git a/cmake/core.cmake b/cmake/core.cmake
index 1971352..793b24d 100644
--- a/cmake/core.cmake
+++ b/cmake/core.cmake
@@ -7,6 +7,10 @@ target_include_directories(mbgl-core
     PRIVATE src
 )
 
+find_package(PNG REQUIRED)
+find_package(JPEG REQUIRED)
+target_link_libraries(mbgl-core PRIVATE JPEG::JPEG PNG::PNG)
+
 target_link_libraries(mbgl-core PRIVATE
     earcut.hpp
     eternal
@@ -25,7 +29,8 @@ target_link_libraries(mbgl-core PUBLIC
     boost
     geojson.hpp
     geometry.hpp
-    icu
+    ICU::i18n
+    ICU::uc
     optional
     polylabel
     protozero
diff --git a/cmake/filesource.cmake b/cmake/filesource.cmake
--- a/cmake/filesource.cmake
+++ b/cmake/filesource.cmake
@@ -13,6 +13,11 @@ target_link_libraries(mbgl-filesource
     PUBLIC expected
 )
 
+find_package(sqlite3 REQUIRED)
+target_link_libraries(mbgl-filesource
+    PRIVATE sqlite3
+)
+
 mbgl_filesource()
 
 create_source_groups(mbgl-filesource)
diff --git a/cmake/mason-dependencies.cmake b/cmake/mason-dependencies.cmake
--- a/cmake/mason-dependencies.cmake
+++ b/cmake/mason-dependencies.cmake
@@ -6,8 +6,6 @@ elseif(MBGL_PLATFORM STREQUAL "ios")
     # noop
 elseif(MBGL_PLATFORM STREQUAL "linux")
     mason_use(libuv VERSION 1.9.1)
-    mason_use(libpng VERSION 1.6.25)
-    mason_use(libjpeg-turbo VERSION 1.5.0)
     mason_use(args VERSION 6.2.0 HEADER_ONLY)
 
     if(WITH_EGL)
@@ -20,8 +18,4 @@ elseif(MBGL_PLATFORM STREQUAL "macos")
         mason_use(swiftshader VERSION 2018-05-31)
     endif()
 elseif(MBGL_PLATFORM STREQUAL "qt")
-    if(NOT WITH_QT_DECODERS)
-        mason_use(libjpeg-turbo VERSION 1.5.0)
-        mason_use(libpng VERSION 1.6.25)
-    endif()
 endif()
diff --git a/cmake/vendor.cmake b/cmake/vendor.cmake
--- a/cmake/vendor.cmake
+++ b/cmake/vendor.cmake
@@ -12,7 +12,6 @@ include(${CMAKE_SOURCE_DIR}/vendor/expected.cmake)
 include(${CMAKE_SOURCE_DIR}/vendor/geojson-vt-cpp.cmake)
 include(${CMAKE_SOURCE_DIR}/vendor/geojson.hpp.cmake)
 include(${CMAKE_SOURCE_DIR}/vendor/geometry.hpp.cmake)
-include(${CMAKE_SOURCE_DIR}/vendor/icu.cmake)
 include(${CMAKE_SOURCE_DIR}/vendor/jni.hpp.cmake)
 include(${CMAKE_SOURCE_DIR}/vendor/kdbush.hpp.cmake)
 include(${CMAKE_SOURCE_DIR}/vendor/nunicode.cmake)
@@ -28,6 +27,8 @@ include(${CMAKE_SOURCE_DIR}/vendor/variant.cmake)
 include(${CMAKE_SOURCE_DIR}/vendor/vector-tile.cmake)
 include(${CMAKE_SOURCE_DIR}/vendor/wagyu.cmake)
 
+find_package(ICU COMPONENTS i18n uc REQUIRED)
+
 if(MBGL_PLATFORM STREQUAL "linux" OR MBGL_PLATFORM STREQUAL "macos")
     include(${CMAKE_SOURCE_DIR}/vendor/glfw.cmake)
 endif()
diff --git a/platform/linux/config.cmake b/platform/linux/config.cmake
--- a/platform/linux/config.cmake
+++ b/platform/linux/config.cmake
@@ -1,5 +1,3 @@
-include(cmake/sqlite.cmake)
-
 add_library(mbgl-loop-uv STATIC
     platform/default/src/mbgl/util/async_task.cpp
     platform/default/src/mbgl/util/run_loop.cpp
@@ -81,12 +79,8 @@ macro(mbgl_platform_core)
         PRIVATE platform/linux
     )
 
-    target_add_mason_package(mbgl-core PUBLIC libpng)
-    target_add_mason_package(mbgl-core PUBLIC libjpeg-turbo)
-
     target_link_libraries(mbgl-core
         PRIVATE nunicode
-        PRIVATE icu
         PUBLIC -lz
     )
 
@@ -112,7 +106,6 @@ macro(mbgl_filesource)
     # We're not referencing any cURL symbols since we're dynamically loading it. However, we want to
     # link the library anyway since we're definitely going to load it on startup anyway.
     target_link_libraries(mbgl-filesource
-        PUBLIC sqlite
         PUBLIC -Wl,--no-as-needed -lcurl -Wl,--as-needed
     )
 endmacro()
diff --git a/platform/qt/config.cmake b/platform/qt/config.cmake
--- a/platform/qt/config.cmake
+++ b/platform/qt/config.cmake
@@ -21,16 +21,12 @@ macro(mbgl_platform_core)
             PRIVATE platform/default/src/mbgl/util/jpeg_reader.cpp
             PRIVATE platform/default/src/mbgl/util/png_reader.cpp
         )
-
-        target_add_mason_package(mbgl-core PRIVATE libjpeg-turbo)
-        target_add_mason_package(mbgl-core PRIVATE libpng)
     else()
         add_definitions(-DQT_IMAGE_DECODERS)
     endif()
 
     if(NOT WITH_QT_I18N)
         target_sources(mbgl-core PRIVATE platform/default/src/mbgl/text/bidi.cpp)
-        target_link_libraries(mbgl-core PRIVATE icu)
     else()
         target_sources(mbgl-core PRIVATE platform/qt/src/bidi.cpp)
     endif()
diff --git a/platform/qt/qt.cmake b/platform/qt/qt.cmake
index e651b8c..4276ddf 100644
--- a/platform/qt/qt.cmake
+++ b/platform/qt/qt.cmake
@@ -55,7 +55,7 @@ set(MBGL_QT_FILESOURCE_FILES
     PRIVATE platform/qt/src/http_request.hpp
 
     # Database
-    PRIVATE platform/qt/src/sqlite3.cpp
+    PRIVATE platform/default/src/mbgl/storage/sqlite3.cpp
 )
 
 # Shared library
@@ -116,7 +116,6 @@ find_package(Qt5Gui      REQUIRED)
 find_package(Qt5Network  REQUIRED)
 find_package(Qt5OpenGL   REQUIRED)
 find_package(Qt5Widgets  REQUIRED)
-find_package(Qt5Sql      REQUIRED)
 
 # Qt5 always build OpenGL ES2 which is the compatibility
 # mode. Qt5 will take care of translating the desktop
@@ -131,7 +130,6 @@ set(MBGL_QT_CORE_LIBRARIES
 
 set(MBGL_QT_FILESOURCE_LIBRARIES
     PUBLIC Qt5::Network
-    PUBLIC Qt5::Sql
 )
 
 target_link_libraries(mbgl-qt
