clear variables;
close all;

%% configuration
cnf = opaq_readconfig( 'etc/config.xml' );
pol = 'o3';
aggr = 'dayavg';
start_date = datenum( 2009, 1, 1 );
stop_date  = datenum( 2015, 12, 31 );

par_names = {
    '2-m temperature', ...
    '30-m temperature', ...
    '10-m wind velocity', ...
    '10-m wind direction', ...
    '30-m wind velocity', ...
    '30-m wind direction', ...
    'boundary layer height (corresponding to critical bulk Richardson = 0.5)', ...
    'height of the layer where the transport length < 100 m ', ...
    'transport length at the first level (about 25-m height)', ...
    'mean transport length in the layer 0-50 m (from the surface)', ...
    'mean transport length in the layer 0-100 m', ...
    'total cloud cover (range0 to 1)', ...
    'low cloud cover (range0 to 1)', ...
    'medium cloud cover (range0 to 1)', ...
    'high cloud cover (range0 to 1)', ...
    'horizontal transport in the boundary layer (obtained by the product of the boundary layer height and the mean wind in the boundary layer)', ...
    'height of the layer where the transport length < 200 m', ...
    'height of the layer where the transport length < 300 m', ...
    'height of the layer where the transport length < 500 m', ...
    'height of the layer where the transport length < 1000 m', ...
    'S parameter of Bultynck-Malet classification (multiplied by a factor 1000)', ...
    'lambda parameter of Bultynck-Malet classificationLambda = LOG10(106 * ABS(S))', ...
    'relative humidity (%) at 300-m height', ...
    'relative humidity in the layer 0-50 m', ...
    'relative humidity at 100-m height (not layer 0-100 m !)', ...
    'wind velocity at 50-m height', ...
    'wind velocity at 100-m height', ...
    'wind velocity at 200-m height', ...
    'wind velocity at 300-m height', ...
    'wind velocity at 500-m height', ...
    'wind velocity at 750-m height', ...
    'wind velocity at 1000-m height' };

fname = sprintf( 'opaq_samples_%s_%s_%s-%s.h5', ...
    pol, aggr, datestr(start_date, 'yyyymmdd' ), datestr( stop_date, 'yyyymmdd' ) );


%% write out
for i=1:length(cnf.network)
    s = cnf.network(i);

    % -- does the station measure the requested pollutant ?
    if ~any( strcmp( s.pollutants, pol ) ), continue; end;

    fprintf( 'Dumping %s...\n', s.name );
    
    [ dates, target, input ] = ...
        opaq_createsamples( cnf, s.name, pol, aggr, 9, 0, 'all_meteo', start_date, stop_date );
    
    % -- unscale target back to normal concentrations...
    target = exp(target)-1;
    
    
    if isempty( target ), continue; end;
    
    % -- dump into the file
    h5create( fname, sprintf( '/%s/obs', s.name ), size( target ) );
    h5create( fname, sprintf( '/%s/meteo', s.name ), size( input ) );
    h5create( fname, sprintf( '/%s/year', s.name ), size( dates ) );
    h5create( fname, sprintf( '/%s/month', s.name ), size( dates ) );
    h5create( fname, sprintf( '/%s/day', s.name ), size( dates ) );
    
    h5write( fname, sprintf( '/%s/obs', s.name ), target );
    h5write( fname, sprintf( '/%s/meteo', s.name ), input );
    
    dv = datevec( dates );
    h5write( fname, sprintf( '/%s/year', s.name ), dv(:,1) );
    h5write( fname, sprintf( '/%s/month', s.name ), dv(:,2) );
    h5write( fname, sprintf( '/%s/day', s.name ), dv(:,3) );
        
    
    flds = fieldnames(s);
    for k=1:length(flds)
        if ~strcmp( flds{k}, 'pollutants' )
            h5writeatt( fname, sprintf( '/%s/', s.name), flds{k}, s.( flds{k} ) );
        end
    end
end 

h5writeatt( fname, '/', 'pollutant', pol );
h5writeatt( fname, '/', 'aggregation', aggr );
h5writeatt( fname, '/', 'start_date', datestr(start_date, 'yyyymmdd' ) );
h5writeatt( fname, '/', 'stop_date', datestr( stop_date, 'yyyymmdd' ) );

for k=1:length(par_names)
    h5writeatt( fname, '/', sprintf( 'P%02d', k) , par_names{k} );
end

