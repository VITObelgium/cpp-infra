if(NOT _VCPKG_LINUX_TOOLCHAIN)
    set(_VCPKG_LINUX_TOOLCHAIN 1)

    if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
        set(CMAKE_CROSSCOMPILING OFF CACHE BOOL "")
    endif()

    set(CMAKE_SYSTEM_NAME Linux CACHE STRING "")

    if(VCPKG_TARGET_ARCHITECTURE STREQUAL "x64")
        set(CMAKE_SYSTEM_PROCESSOR x86_64 CACHE STRING "")
    elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL "x86")
        set(CMAKE_SYSTEM_PROCESSOR x86 CACHE STRING "")
        string(APPEND VCPKG_C_FLAGS " -m32")
        string(APPEND VCPKG_CXX_FLAGS " -m32")
    endif()

    # if(NOT INTEL_INSTALL_PATH)
    # set(INTEL_INSTALL_PATH /tools/toolchains/intel/oneapi/compiler/latest)
    # set(HAVE_LIBM "${INTEL_INSTALL_PATH}/lib/libimf.a" CACHE FILEPATH "")
    # endif()

    # set(INTEL_PATH ${INTEL_INSTALL_PATH}/bin/)
    # set(INTEL_LLVM_PATH ${INTEL_INSTALL_PATH}/bin/compiler/)
    # set(ENV{LD_LIBRARY_PATH} "${INTEL_PATH}/compiler/lib/intel64_lin:$ENV{LD_LIBRARY_PATH}")
    set(CMAKE_C_COMPILER ${INTEL_PATH}icx CACHE FILEPATH "")
    set(CMAKE_ASM_COMPILER ${INTEL_PATH}icx CACHE FILEPATH "")
    set(CMAKE_CXX_COMPILER ${INTEL_PATH}icpx CACHE FILEPATH "")
    set(CMAKE_Fortran_COMPILER ${INTEL_PATH}ifx CACHE FILEPATH "")
    set(CMAKE_RANLIB ${INTEL_LLVM_PATH}llvm-ranlib CACHE FILEPATH "")
    set(CMAKE_AR ${INTEL_LLVM_PATH}llvm-ar CACHE FILEPATH "")

    set(LINKER_EXECUTABLE ${INTEL_LLVM_PATH}lld CACHE FILEPATH "")
    set(CMAKE_C_FLAGS "${VCPKG_C_FLAGS} ${CMAKE_C_FLAGS}" CACHE STRING "")
    set(CMAKE_CXX_FLAGS "${VCPKG_CXX_FLAGS} ${CMAKE_CXX_FLAGS}" CACHE STRING "")

    set(CMAKE_EXE_LINKER_FLAGS "-static-intel -static-libstdc++ -static-libgcc ${VCPKG_LINKER_FLAGS}" CACHE STRING "" FORCE)
    set(CMAKE_SHARED_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} CACHE STRING "" FORCE)
    set(CMAKE_MODULE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} CACHE STRING "" FORCE)

    set(CMAKE_C_VISIBILITY_PRESET hidden)
    set(CMAKE_CXX_VISIBILITY_PRESET hidden)
    set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)

    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY CACHE STRING "")
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY CACHE STRING "")

    get_property(_CMAKE_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE)

    if(NOT _CMAKE_IN_TRY_COMPILE)
        string(APPEND CMAKE_C_FLAGS_INIT " ${VCPKG_C_FLAGS} ")
        string(APPEND CMAKE_CXX_FLAGS_INIT " ${VCPKG_CXX_FLAGS} ")
        string(APPEND CMAKE_C_FLAGS_DEBUG_INIT " ${VCPKG_C_FLAGS_DEBUG} ")
        string(APPEND CMAKE_CXX_FLAGS_DEBUG_INIT " ${VCPKG_CXX_FLAGS_DEBUG} ")
        string(APPEND CMAKE_C_FLAGS_RELEASE_INIT " ${VCPKG_C_FLAGS_RELEASE} ")
        string(APPEND CMAKE_CXX_FLAGS_RELEASE_INIT " ${VCPKG_CXX_FLAGS_RELEASE} ")

        string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT " ${VCPKG_LINKER_FLAGS} ")
        string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT " ${VCPKG_LINKER_FLAGS} ")

        if(VCPKG_CRT_LINKAGE STREQUAL "static")
            string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT "-static ")
            string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT "-static ")
        endif()

        string(APPEND CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT " ${VCPKG_LINKER_FLAGS_DEBUG} ")
        string(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT " ${VCPKG_LINKER_FLAGS_DEBUG} ")
        string(APPEND CMAKE_SHARED_LINKER_FLAGS_RELEASE_INIT " ${VCPKG_LINKER_FLAGS_RELEASE} ")
        string(APPEND CMAKE_EXE_LINKER_FLAGS_RELEASE_INIT " ${VCPKG_LINKER_FLAGS_RELEASE} ")
    endif()
endif()
